// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool using the template near this directory.
//     Please see this solution for more details: Codegen\Codegen.sln
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
import { DateParser } from '../date-parser';
import { isSet } from '../is-set';
import {<%
dependencies.forEach((dependency, index) => { %>
	<%= dependency %><%= index + 1 !== dependencies.length ? ',' : '' %><%
}); %> } from './';

export class <%= utils.handleBase(Model) %> {<%
	Model.properties.forEach(property => { %>
	public <%- utils.lowerCaseFirst(property.name) %>:<%- utils.parseType(property) %>;<%
	});
	%>

	constructor(properties?:Partial<<%= utils.handleBase(Model) %>>) {
		if (isSet(properties)) {
			<%= utils.handleBase(Model) %>.copyProperties(properties, this);
		}
	}

	public static fromJSON(json:any) {
		let retVal = new <%= utils.handleBase(Model) %>();
		if (!json) {
			return retVal;
		}
		<%= utils.handleBase(Model) %>.copyProperties(json, retVal);
		return retVal;
	}

	private static copyProperties(
			from:Partial<<%= utils.handleBase(Model) %>>,
			to:Partial<<%= utils.handleBase(Model) %>>) {<%
		Model.properties.forEach(property => {
		%>
		if (isSet(from.<%= utils.lowerCaseFirst(property.name) %>)) {
			<%= utils.copyProperties(property.name, property.type) %>
		}<%
		}); %>
	}

	public clone():<%= utils.handleBase(Model) %> {
		let retVal = new <%= utils.handleBase(Model) %>();
		<%= utils.handleBase(Model) %>.copyProperties(this, retVal);
		return retVal;
	}

	public toJSON():any {
		let retVal:any = {};
		<%= utils.handleBase(Model) %>.copyProperties(this, retVal);
		return retVal;
	}<%
	Model.properties
		.filter(property => property.type.typeId === utils.MetaTypes.String
						 && property.type.formatId === utils.MetaStringFormat.DateTime)
		.forEach(property => { %>

	public get <%- utils.lowerCaseFirst(property.name).replace(/DateTime$/, '') %>Moment() {
		return DateParser.fromServer(this.<%- utils.lowerCaseFirst(property.name) %>);
	}

	public set <%- utils.lowerCaseFirst(property.name).replace(/DateTime$/, '') %>Moment(value) {
		this.<%- utils.lowerCaseFirst(property.name) %> = DateParser.forServer(value);
	}<%
	});
	%>
}
